{% extends 'layout.twig' %}

{% block body %}
  <form id="main-form" style="display: none">
    <input id="file" type="file">
    <button type="submit">Save</button>
  </form>

  <p
          style="background-color: blue; color: white; padding: 5px">
    {{ examdetails.examTitle }}
  </p>

  {% for question in questions %}
    <h3 style="margin-bottom:3px">{{question.questionText}}</h3>
    <label
            id="review_container_{{ question.questionId  }}"
            style="display:none; align-items:center; margin-bottom: 10px; color: blue">
      <small style="color: blue">
      <input type="checkbox" > Mark for review
      </small>
    </label>
    <div>
      <table id="question_table_{{question.questionId}}">
        <tr>
          <td>
            <input type="checkbox" {% if question.answer=='1' %}checked{% endif %}
                   value="1"
                   onclick="save_text_answer('{{examdetails.examId}}', '{{examdetails.studentId}}', '{{question.questionId}}', '{{examdetails.examdetailsId}}', this)">
          </td>
          <td>{{question.answerText1}}</td>
        </tr>
        <tr>
          <td>
            <input type="checkbox"
                   value="2"
                   onclick="save_text_answer('{{examdetails.examId}}', '{{examdetails.studentId}}', '{{question.questionId}}', '{{examdetails.examdetailsId}}', this)">
          </td>
          <td>{{question.answerText2}}</td>
        </tr>
        <tr>
          <td>
            <input type="checkbox"
                   value="3"
                   onclick="save_text_answer('{{examdetails.examId}}', '{{examdetails.studentId}}', '{{question.questionId}}', '{{examdetails.examdetailsId}}', this)">
          </td>
          <td>{{question.answerText3}}</td>
        </tr>
        <tr>
          <td>
            <input type="checkbox"
                   value="4"
                   onclick="save_text_answer('{{examdetails.examId}}', '{{examdetails.studentId}}', '{{question.questionId}}', '{{examdetails.examdetailsId}}', this)">

          </td>
          <td>{{question.answerText4}}</td>
        </tr>
      </table>
    </div>
    <hr>
  {% endfor %}





  <!----------
  - Stop watch
  ----------->
  <div class="stopwatch">
    <div>
      <span id="days"></span> day
    </div>
    <div>
      <span id="hours"></span> hour
    </div>
    <div>
      <span id="minutes"></span> min
    </div>
    <div>
      <span id="seconds"></span> sec
    </div>
  </div>


  <script>
    let last_count = 0;
    let sockets = [];

    function conn() {
      sockets[last_count] = io({
        path: "/io",
        port: 3000
      });
      sockets[last_count].on("connect", function (con){
        console.log("connected");
        if(last_count<2000) {
          conn();
        }
      })
      last_count++;
    }
    conn();






    /*
    socket.on("answer_uploaded",(data)=>{
      console.log(data);
    })


    ///
    document.querySelector("#main-form").onsubmit = (e)=>{
      e.preventDefault();
      let files = document.querySelector("#file").files;
      save_file_answer(files);
    }
    function save_text_answer(examId, studentId, questionId, examdetailsId, checkbox=false){
      let review_container = document.querySelector("#review_container_"+questionId);
      document.querySelectorAll("#question_table_"+questionId+" input[type=checkbox]").forEach(el=>{
        if(checkbox!==el){
          el.checked = false;
        }
      });
      let answer;
      if(checkbox){
        if(checkbox.checked){
          answer = checkbox.value;
          review_container.style.display = "flex";
        } else {
          answer = "";
          review_container.style.display = "none";
        }
      }

      socket.emit("answer_by_student", {
        examId    : examId,
        studentId : studentId,
        questionId:questionId,
        examdetailsId:examdetailsId,
        dataType : "text",
        answer : answer
      });
    }
    function save_file_answer(files){
      let fr = new FileReader();
      fr.addEventListener("loadend", function() {
        socket.emit("answer_by_student", {
          examId    : 0,
          studentId : 0,
          questionId:0,
          examDetailsId:0,
          dataType : "file",
          answer : {
            file_name: files[0].name,
            file_type: files[0].type,
            file_size: files[0].size,
            file_binary: fr.result
          }
        });
      });
      fr.readAsArrayBuffer(files[0]);
    }
    //stop watch
    function stopwatch(element, endtime){
      const second = 1000,
              minute = second * 60,
              hour = minute * 60,
              day = hour * 24;
      let distance = endtime;

      let x = setInterval(function() {
        distance = distance - second;
        document.getElementById('hours').innerText = Math.floor((distance % (day)) / (hour));
        document.getElementById('minutes').innerText = Math.floor((distance % (hour)) / (minute));
        document.getElementById('seconds').innerText = Math.floor((distance % (minute)) / second);

        //do something later when date is reached
        //if (distance < 0) {
        //  clearInterval(x);
        //  'IT'S MY BIRTHDAY!;
        //}

      }, second)
    }
    function stillTimeRest() {
      console.log('{{ examdetails.started_time }}');
      let $d1 = new Date('{{ examdetails.started_time }}').getTime();
      let $d2 = new Date().getTime();
      let $diff = $d2-$d1;
      let $duration = parseInt('{{ examdetails.duration }}')*60000;
      let $remaining = $duration-$diff;
      stopwatch("", $remaining);
    }

    stillTimeRest();
    //stopwatch('', '');


    */
  </script>
{% endblock %}
